import asyncio
import json
import logging
import xui.public
from datetime import datetime
from aiogram import Bot, Router
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import MAX_MESSAGE_LENGTH, config
from database.database import Session
from database.user import User, UserType, create_user, get_all_users, get_user

logger = logging.getLogger(__name__)
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "admin_user_list")
async def admin_user_list(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –° –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="user_list_active")
    builder.button(text="üõë –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="user_list_inactive")
    builder.button(text="‚è±Ô∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏", callback_data="static_profiles_menu")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
    builder.adjust(1, 1, 1)
    await callback.message.edit_text("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä**", reply_markup=builder.as_markup(), parse_mode='Markdown')
    
@router.callback_query(F.data == "user_list_active")
async def handle_user_list_active(callback: CallbackQuery):
    users = await get_all_users(with_subscription=True)
    await callback.answer()
    if not users:
        await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π")
        return
    
    text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:</b>\n\n"
    for user in users:
        expire_date = user.subscription_end.strftime("%d.%m.%Y %H:%M")
        username = f"@{user.username}" if user.username else "none"
        user_line = f"‚Ä¢ {user.full_name} ({username} | <code>{user.telegram_id}</code>) - –¥–æ <code>{expire_date}</code>\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        if len(text) + len(user_line) > MAX_MESSAGE_LENGTH:
            await callback.message.answer(text, parse_mode="HTML")
            text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n\n"
        
        text += user_line
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    await callback.message.answer(text, parse_mode="HTML")

@router.callback_query(F.data == "user_list_inactive")
async def handle_user_list_inactive(callback: CallbackQuery):
    await callback.answer()
    users = await get_all_users(with_subscription=False)
    if not users:
        await callback.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    for user in users:
        username = f"@{user.username}" if user.username else "none"
        user_line = f"‚Ä¢ {user.full_name} ({username} | <code>{user.telegram_id}</code>)\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        if len(text) + len(user_line) > MAX_MESSAGE_LENGTH:
            await callback.message.answer(text, parse_mode="HTML")
            text = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):</b>\n\n"
        
        text += user_line
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    await callback.message.answer(text, parse_mode="HTML")
