from aiogram import Router

router = Router()

@router.callback_query(F.data.startswith("pay_"))
async def process_payment(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    
    try:
        months = int(callback.data.split("_")[1])
        if months not in config.PRICES:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏")
            return
            
        final_price = config.calculate_price(months)
        suffix = "–º–µ—Å—è—Ü" if months == 1 else "–º–µ—Å—è—Ü–∞" if months in (2,3,4) else "–º–µ—Å—è—Ü–µ–≤"
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
        prices = [LabeledPrice(label=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å.", amount=final_price * 100)]
        if config.PAYMENT_TOKEN:
            await bot.send_invoice(
                chat_id=callback.from_user.id,
                title=f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤",
                description=f"–î–æ—Å—Ç—É–ø –∫ VPN —Å–µ—Ä–≤–∏—Å—É –Ω–∞ {months} {suffix}",
                payload=f"subscription_{months}",
                provider_token=config.PAYMENT_TOKEN,
                currency="RUB",
                prices=prices,
                start_parameter="create_subscription",
                need_email=True,
                need_phone_number=False
            )
        else:
            await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        logger.error(f"üõë Payment error: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É")

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.successful_payment)
async def process_successful_payment(message: Message, bot: Bot):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ payload
        payload = message.successful_payment.invoice_payload
        if payload.startswith("subscription_"):
            months = int(payload.split("_")[1])
            final_price = config.calculate_price(months)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä—É–±–ª–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = await get_user(message.from_user.id)
            if not user:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ)
            action_type = "–∫—É–ø–ª–µ–Ω–∞" if user.type == UserType.NEW else "–ø—Ä–æ–¥–ª–µ–Ω–∞"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success = await update_subscription(message.from_user.id, months)
            suffix = "–º–µ—Å—è—Ü" if months == 1 else "–º–µ—Å—è—Ü–∞" if months in (2,3,4) else "–º–µ—Å—è—Ü–µ–≤"
            if success:
                await message.answer(
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {action_type} –Ω–∞ {months} {suffix}.\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                admin_message = (
                    f"{action_type.capitalize()} –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "
                    f"`{user.full_name}` | `{user.telegram_id}` "
                    f"–Ω–∞ {months} {suffix} - {final_price}‚ÇΩ"
                )
                
                for admin_id in config.ADMINS:
                    try:
                        await bot.send_message(admin_id, admin_message, parse_mode='Markdown')
                    except Exception as e:
                        logger.error(f"üõë Failed to send notification to admin {admin_id}: {e}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    except Exception as e:
        logger.error(f"üõë Successful payment processing error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

@router.callback_query(F.data == "renew_sub")
async def renew_subscription(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    for months in sorted(config.PRICES.keys()):
        price_info = config.PRICES[months]
        final_price = config.calculate_price(months)
        
        discount_text = ""
        if price_info["discount_percent"] > 0:
            discount_text = f" (-{price_info['discount_percent']}%)"
            
        button_text = f"{months} –º–µ—Å. - {final_price} —Ä—É–±.{discount_text}"
        builder.button(text=button_text, callback_data=f"pay_{months}")
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üíµ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:**",
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )