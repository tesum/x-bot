import asyncio
import json
import logging
from handlers.user.states import UserStates
import xui.public
from datetime import datetime
from aiogram import Bot, Dispatcher, Router
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import MAX_MESSAGE_LENGTH, config
from database.database import Session
from database.user import User, UserType, create_user, get_user
from .admin.base import routers as routers_admin
from .user.routers import routers as routers_user

logger = logging.getLogger(__name__)
router = Router()

def setup_handlers(dp: Dispatcher):
    dp.include_router(router)
    for r in routers_admin + routers_user:
        dp.include_router(r)
    logger.info("‚úÖ Handlers setup completed")
    
def split_text(text: str, max_length: int = MAX_MESSAGE_LENGTH) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        part = text[:max_length]
        last_newline = part.rfind('\n')
        if last_newline != -1:
            part = part[:last_newline]
        parts.append(part)
        text = text[len(part):].lstrip()
    return parts

async def show_menu(bot: Bot, chat_id: int, message_id: int = None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é (–º–æ–∂–µ—Ç –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ)"""
    user = await get_user(chat_id)
    if not user:
        return
    
    if user.subscription_end is None:
        status = "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        expire_date = "–ù–µ—Ç"
    else:
        status = "–ê–∫—Ç–∏–≤–Ω–∞" if user.subscription_end > datetime.utcnow() else "–ò—Å—Ç–µ–∫–ª–∞"
        expire_date = user.subscription_end.strftime("%d-%m-%Y %H:%M") if status == "–ê–∫—Ç–∏–≤–Ω–∞" else status
    
    text = (
        f"**–ü—Ä–æ—Ñ–∏–ª—å**: `{user.username}`\n"
        f"**id**: `{user.telegram_id}`\n"
        f"**–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞**: `{user.discount_percent}%`\n"
        f"**–ü–æ–¥–ø–∏—Å–∫–∞**: `{status}`\n"
        f"**–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏**: `{expire_date}`"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üíµ –ü—Ä–æ–¥–ª–∏—Ç—å" if status=="–ê–∫—Ç–∏–≤–Ω–∞" else "üíµ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="renew_sub")
    if status != "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞":
        builder.button(text="‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å", callback_data="connect")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    builder.button(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="user:activate_promocode")
    builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    
    if user.is_admin:
        builder.button(text="‚ö†Ô∏è –ê–¥–º–∏–Ω. –º–µ–Ω—é", callback_data="admin_menu")
    
    builder.adjust(2, 2, 1)
    
    if message_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )

@router.message(Command("start"))
async def start_cmd(message: Message, bot: Bot):
    logger.info(f"‚ÑπÔ∏è  Start command from {message.from_user.id}")
    user = await get_user(message.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    update_data = {}
    if user:
        if user.full_name != message.from_user.full_name:
            update_data["full_name"] = message.from_user.full_name
        if user.username != message.from_user.username:
            update_data["username"] = message.from_user.username
    else:
        is_admin = message.from_user.id in config.ADMINS
        user = await create_user(
            telegram_id=message.from_user.id, 
            full_name=message.from_user.full_name,
            username=message.from_user.username,
            is_admin=is_admin
        )
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç–∞ `{(await bot.get_me()).full_name}`!\n–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω **–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π** —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ **1 –¥–µ–Ω—å**!", parse_mode='Markdown')
        await asyncio.sleep(2)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if update_data:
        with Session() as session:
            db_user = session.query(User).get(user.id)
            for key, value in update_data.items():
                setattr(db_user, key, value)
            session.commit()
            logger.info(f"üîÑ Updated user data: {message.from_user.id}")
    
    await show_menu(bot, message.from_user.id)

@router.message(Command("menu"))
async def menu_cmd(message: Message, bot: Bot):
    user = await get_user(message.from_user.id)
    if not user:
        await start_cmd(message, bot)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    update_data = {}
    if user.full_name != message.from_user.full_name:
        update_data["full_name"] = message.from_user.full_name
    if user.username != message.from_user.username:
        update_data["username"] = message.from_user.username
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if update_data:
        with Session() as session:
            db_user = session.query(User).get(user.id)
            for key, value in update_data.items():
                setattr(db_user, key, value)
            session.commit()
            logger.info(f"üîÑ Updated user data in menu: {message.from_user.id}")
    
    await show_menu(bot, message.from_user.id)

@router.callback_query(F.data == "help")
async def help_msg(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(UserStates.waiting_help_text)

@router.message(StateFilter(UserStates.waiting_help_text))
async def handle_user_help_message_text(msg: Message, state: FSMContext, bot: Bot):
    message_for_admins = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (@{msg.from_user.username}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å\n"
        f">{msg.text}"
    )
    for admin_id in config.ADMINS:
        try:
            await bot.send_message(admin_id, message_for_admins)
        except Exception as e:
            logger.error(f"üõë Failed to send notification to admin {admin_id}: {e}")

@router.callback_query(F.data == "connect")
async def connect_profile(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("üõë –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è")
        return

    if user.type == UserType.EXPIRED or (user.subscription_end is not None and user.subscription_end < datetime.utcnow()):
        await callback.answer("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        return
    
    if not user.vless_profile_data:
        await callback.message.edit_text("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –≤–∞—à VPN –ø—Ä–æ—Ñ–∏–ª—å...")
        profile_data = await xui.public.create_vless_profile(user.telegram_id)
        
        if profile_data:
            with Session() as session:
                db_user = session.query(User).filter_by(telegram_id=user.telegram_id).first()
                if db_user:
                    db_user.vless_profile_data = json.dumps(profile_data)
                    session.commit()
            user = await get_user(user.telegram_id)
        else:
            await callback.message.answer("üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    profile_data = safe_json_loads(user.vless_profile_data, default={})
    if not profile_data:
        await callback.message.answer("‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    vless_url = xui.public.generate_vless_url(profile_data)
    text = (
        "üéâ **–í–∞—à VPN –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤!**\n\n"
        "‚ÑπÔ∏è **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:**\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n\n"
        f"`{vless_url}`\n\n"
        "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
    )

    builder = InlineKeyboardBuilder()
    builder.button(text='üñ•Ô∏è Windows [V2RayN]', url='https://github.com/2dust/v2rayN/releases/download/7.13.8/v2rayN-windows-64-desktop.zip')
    builder.button(text='üêß Linux [NekoBox]', url='https://github.com/MatsuriDayo/nekoray/releases/download/4.0.1/nekoray-4.0.1-2024-12-12-debian-x64.deb')
    builder.button(text='üçé Mac [V2RayU]', url='https://github.com/yanue/V2rayU/releases/download/v4.2.6/V2rayU-64.dmg ')
    builder.button(text='üçè iOS [V2RayTun]', url='https://apps.apple.com/ru/app/v2raytun/id6476628951')
    builder.button(text='ü§ñ Android [V2RayNG]', url='https://github.com/2dust/v2rayNG/releases/download/1.10.16/v2rayNG_1.10.16_arm64-v8a.apk')
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(2, 2, 1, 1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='Markdown')

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    await show_menu(bot, callback.from_user.id, callback.message.message_id)

@router.callback_query(F.data == "stats")
async def user_stats(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not user or not user.vless_profile_data:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return
    await callback.message.edit_text("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    profile_data = safe_json_loads(user.vless_profile_data, default={})
    stats = await xui.public.get_user_stats(profile_data["email"])

    logger.debug(stats)
    upload = f"{stats.get('upload', 0) / 1024 / 1024:.2f}"
    upload_size = 'MB' if int(float(upload)) < 1024 else 'GB'
    if upload_size == "GB":
        upload = f"{int(float(upload) / 1024):.2f}"

    download = f"{stats.get('download', 0) / 1024 / 1024:.2f}"
    download_size = 'MB' if int(float(download)) < 1024 else 'GB'
    if download_size == "GB":
        download = f"{int(float(download) / 1024):.2f}"

    await callback.message.delete()
    text = (
        "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        f"üîº –ó–∞–≥—Ä—É–∂–µ–Ω–æ: `{upload} {upload_size}`\n"
        f"üîΩ –°–∫–∞—á–∞–Ω–æ: `{download} {download_size}`\n"
    )
    await callback.message.answer(text, parse_mode='Markdown')

def safe_json_loads(data, default=None):
    if not data:
        return default
    try:
        return json.loads(data)
    except Exception:
        return default